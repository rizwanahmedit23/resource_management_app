{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../login/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const expectedRole = route.data['expectedRole'];\n    const currentUser = this.authService.getCurrentUser();\n    console.log(currentUser);\n    console.log(\"user role check\", currentUser.role === expectedRole);\n    if (currentUser && currentUser.role === expectedRole) {\n      return true;\n    }\n    // Redirect to login or unauthorized page\n    this.router.navigate(['/login']); // You can change this to the desired path\n    return false;\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,YAAY,GAAGF,KAAK,CAACG,IAAI,CAAC,cAAc,CAAa;IAC3D,MAAMC,WAAW,GAAO,IAAI,CAACP,WAAW,CAACQ,cAAc,EAAE;IACzDC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;IACxBE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,WAAW,CAACI,IAAI,KAAKN,YAAY,CAAC;IACjE,IAAIE,WAAW,IAAIA,WAAW,CAACI,IAAI,KAAKN,YAAY,EAAE;MAEpD,OAAO,IAAI;;IAGb;IACA,IAAI,CAACJ,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAElC,OAAO,KAAK;EACd;EAAC;qBAjBUd,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAe,SAATf,SAAS;IAAAgB,YAFR;EAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","expectedRole","data","currentUser","getCurrentUser","console","log","role","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\RizwanAhmed\\Downloads\\resource_management_app\\resource_management_app\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from '../login/auth.service';\r\nimport { UserRole } from '../enums/user-role.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const expectedRole = route.data['expectedRole'] as UserRole;\r\n    const currentUser:any = this.authService.getCurrentUser();\r\n    console.log(currentUser);\r\n    console.log(\"user role check\", currentUser.role === expectedRole)\r\n    if (currentUser && currentUser.role === expectedRole) {\r\n      \r\n      return true;\r\n    }\r\n\r\n    // Redirect to login or unauthorized page\r\n    this.router.navigate(['/login']); // You can change this to the desired path\r\n\r\n    return false;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
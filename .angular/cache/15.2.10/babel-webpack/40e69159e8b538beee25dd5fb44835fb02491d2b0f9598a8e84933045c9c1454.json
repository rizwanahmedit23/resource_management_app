{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class AddJobOpeningComponent {\n  constructor(fb) {\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.jobOpeningForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      requirements: this.fb.array([]),\n      responsibilities: this.fb.array([])\n    });\n  }\n  get requirements() {\n    return this.jobOpeningForm.get('requirements');\n  }\n  get responsibilities() {\n    return this.jobOpeningForm.get('responsibilities');\n  }\n  addRequirement() {\n    this.requirements.push(this.fb.control('', Validators.required));\n  }\n  removeRequirement(index) {\n    this.requirements.removeAt(index);\n  }\n  addResponsibility() {\n    this.responsibilities.push(this.fb.control('', Validators.required));\n  }\n  removeResponsibility(index) {\n    this.responsibilities.removeAt(index);\n  }\n  submitForm() {\n    if (this.jobOpeningForm.valid) {\n      // Implement logic to save the job opening\n      console.log('Job Opening Form Submitted:', this.jobOpeningForm.value);\n      // You can send the form value to your backend or handle it as needed\n    }\n  }\n  static #_ = this.ɵfac = function AddJobOpeningComponent_Factory(t) {\n    return new (t || AddJobOpeningComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddJobOpeningComponent,\n    selectors: [[\"app-add-job-opening\"]],\n    decls: 2,\n    vars: 0,\n    template: function AddJobOpeningComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"add-job-opening works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAmB,gBAAgB;;;AAO9E,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,EAAe;IAAf,OAAE,GAAFA,EAAE;EAAiB;EAEvCC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEQA,QAAQ;IACd,IAAI,CAACC,cAAc,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MAClCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC,CAAC;MACxCE,YAAY,EAAE,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC,EAAE,CAAC;MAC/BC,gBAAgB,EAAE,IAAI,CAACV,EAAE,CAACS,KAAK,CAAC,EAAE;KACnC,CAAC;EACJ;EAEA,IAAID,YAAY;IACd,OAAO,IAAI,CAACL,cAAc,CAACQ,GAAG,CAAC,cAAc,CAAc;EAC7D;EAEA,IAAID,gBAAgB;IAClB,OAAO,IAAI,CAACP,cAAc,CAACQ,GAAG,CAAC,kBAAkB,CAAc;EACjE;EAEAC,cAAc;IACZ,IAAI,CAACJ,YAAY,CAACK,IAAI,CAAC,IAAI,CAACb,EAAE,CAACc,OAAO,CAAC,EAAE,EAAEjB,UAAU,CAACS,QAAQ,CAAC,CAAC;EAClE;EAEAS,iBAAiB,CAACC,KAAa;IAC7B,IAAI,CAACR,YAAY,CAACS,QAAQ,CAACD,KAAK,CAAC;EACnC;EAEAE,iBAAiB;IACf,IAAI,CAACR,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAACb,EAAE,CAACc,OAAO,CAAC,EAAE,EAAEjB,UAAU,CAACS,QAAQ,CAAC,CAAC;EACtE;EAEAa,oBAAoB,CAACH,KAAa;IAChC,IAAI,CAACN,gBAAgB,CAACO,QAAQ,CAACD,KAAK,CAAC;EACvC;EAEAI,UAAU;IACR,IAAI,IAAI,CAACjB,cAAc,CAACkB,KAAK,EAAE;MAC7B;MACAC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACpB,cAAc,CAACqB,KAAK,CAAC;MACrE;;EAEJ;EAAC;qBAhDU1B,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAA2B;IAAAC;IAAAC;IAAAC;MAAA;QCRnCC,yBAAG;QAAAA,sCAAsB;QAAAA,iBAAI","names":["Validators","AddJobOpeningComponent","constructor","fb","ngOnInit","initForm","jobOpeningForm","group","title","required","description","requirements","array","responsibilities","get","addRequirement","push","control","removeRequirement","index","removeAt","addResponsibility","removeResponsibility","submitForm","valid","console","log","value","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\SiddhantSinghChouhan\\Desktop\\Recruitment_project\\Resource_Recruitment_management\\resource_management_app\\src\\app\\add-job-opening\\add-job-opening.component.ts","C:\\Users\\SiddhantSinghChouhan\\Desktop\\Recruitment_project\\Resource_Recruitment_management\\resource_management_app\\src\\app\\add-job-opening\\add-job-opening.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-job-opening',\n  templateUrl: './add-job-opening.component.html',\n  styleUrls: ['./add-job-opening.component.css']\n})\nexport class AddJobOpeningComponent implements OnInit {\n  jobOpeningForm: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  private initForm() {\n    this.jobOpeningForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      requirements: this.fb.array([]),\n      responsibilities: this.fb.array([])\n    });\n  }\n\n  get requirements() {\n    return this.jobOpeningForm.get('requirements') as FormArray;\n  }\n\n  get responsibilities() {\n    return this.jobOpeningForm.get('responsibilities') as FormArray;\n  }\n\n  addRequirement() {\n    this.requirements.push(this.fb.control('', Validators.required));\n  }\n\n  removeRequirement(index: number) {\n    this.requirements.removeAt(index);\n  }\n\n  addResponsibility() {\n    this.responsibilities.push(this.fb.control('', Validators.required));\n  }\n\n  removeResponsibility(index: number) {\n    this.responsibilities.removeAt(index);\n  }\n\n  submitForm() {\n    if (this.jobOpeningForm.valid) {\n      // Implement logic to save the job opening\n      console.log('Job Opening Form Submitted:', this.jobOpeningForm.value);\n      // You can send the form value to your backend or handle it as needed\n    }\n  }\n\n}\n","<p>add-job-opening works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
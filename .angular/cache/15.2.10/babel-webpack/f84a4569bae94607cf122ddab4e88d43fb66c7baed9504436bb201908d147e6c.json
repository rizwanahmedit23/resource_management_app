{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  constructor(http) {\n    this.http = http;\n    this.currentUser = null;\n    this.baseUrl = 'http://localhost:8080/api/auth'; // Replace with your actual backend API URL\n  }\n\n  login(user) {\n    return this.http.post(`${this.baseUrl}/login`, user);\n  }\n  getUserRole() {\n    return this.http.get(`${this.baseUrl}/api/auth/user-role`);\n  }\n  setUser(user) {\n    this.user = user;\n    this.setCurrentUser(user);\n  }\n  getUser() {\n    return this.user;\n  }\n  isAuthenticated() {\n    return !!this.user;\n  }\n  hasRole(role) {\n    return this.isAuthenticated() && this.user.role === role;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,WAAW;EAGfC,cAAc,CAACC,IAAU;IAC9B,IAAI,CAACC,WAAW,GAAGD,IAAI;EACzB;EAEOE,cAAc;IACnB,OAAO,IAAI,CAACD,WAAW;EACzB;EAIAE,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAZhB,gBAAW,GAAgB,IAAI;IAU/B,YAAO,GAAG,gCAAgC,CAAC,CAAC;EAEb;;EAEvCC,KAAK,CAACL,IAAS;IACb,OAAO,IAAI,CAACI,IAAI,CAACE,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAEP,IAAI,CAAC;EACtD;EAEAQ,WAAW;IACT,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,qBAAqB,CAAC;EACpE;EAGAG,OAAO,CAACV,IAAS;IACf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,cAAc,CAACC,IAAI,CAAC;EAC3B;EAEAW,OAAO;IACL,OAAO,IAAI,CAACX,IAAI;EAClB;EAEAY,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACZ,IAAI;EACpB;EAEAa,OAAO,CAACC,IAAY;IAClB,OAAO,IAAI,CAACF,eAAe,EAAE,IAAI,IAAI,CAACZ,IAAI,CAACc,IAAI,KAAKA,IAAI;EAC1D;EAAC;qBAvCUhB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiB,SAAXjB,WAAW;IAAAkB,YAFV;EAAM","names":["AuthService","setCurrentUser","user","currentUser","getCurrentUser","constructor","http","login","post","baseUrl","getUserRole","get","setUser","getUser","isAuthenticated","hasRole","role","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\RizwanAhmed\\Downloads\\resource_management_app\\resource_management_app\\src\\app\\login\\auth.service.ts"],"sourcesContent":["// auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { User } from '../login/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUser: User | null = null;\r\n\r\n  public setCurrentUser(user: User): void {\r\n    this.currentUser = user;\r\n  }\r\n\r\n  public getCurrentUser(): User | null {\r\n    return this.currentUser;\r\n  }\r\n  \r\n  private baseUrl = 'http://localhost:8080/api/auth'; // Replace with your actual backend API URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/login`, user);\r\n  }\r\n\r\n  getUserRole(): Observable<string> {\r\n    return this.http.get<string>(`${this.baseUrl}/api/auth/user-role`);\r\n  }\r\n  private user: any; // You can replace 'any' with a proper User interface\r\n\r\n  setUser(user: any): void {\r\n    this.user = user;\r\n    this.setCurrentUser(user)\r\n  }\r\n\r\n  getUser(): any {\r\n    return this.user;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.user;\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    return this.isAuthenticated() && this.user.role === role;\r\n  }\r\n\r\n  // You may want to add other authentication-related methods like logout, token validation, etc.\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}